// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MozaeekCore.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UnProcessedRequestCreationFeature : object, Xunit.IClassFixture<UnProcessedRequestCreationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UnProcessedRequestCreation.feature"
#line hidden
        
        public UnProcessedRequestCreationFeature(UnProcessedRequestCreationFeature.FixtureData fixtureData, MozaeekCore_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "UnProcessedRequestCreation", "\tIn order to create a new UnProcessedRequest\r\n\tAs a WorkWriter\r\n\tI want to create" +
                    " new UnProcessedRequest with corresponding information", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new UnProcessedRequest")]
        [Xunit.TraitAttribute("FeatureTitle", "UnProcessedRequestCreation")]
        [Xunit.TraitAttribute("Description", "Create a new UnProcessedRequest")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void CreateANewUnProcessedRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new UnProcessedRequest", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("\'Ali\' is a WorkWriter in system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Summery"});
                table1.AddRow(new string[] {
                            "\'مدارک لازم جهت دریافت کارت بازرگانی\'",
                            @"'1-داشتن حداقل23 سال تمام 2 –داشتن 3 سال سابقه فعالیت تجاری یا تولیدی به تأییددو نفر از دارندگان کارت بازرگانی با ارائه مدارک دانشگاهی یا تائیداتاق بازرگانی یا اتاق تعاون 3-عدم اشتغال تمام وقت و نداشتن رابطه استخدامی با قوای سه گانه 4 –تکمیل تقاضانامه 5 -کارتپایان خدمت یا معافیت 6ـ اصل و تصویر کارت ملی و شناسنامه 7 -نداشتن سوءپیشینه 8-حضور فرد متقاضی در اداره الزامی است 9 -پرداخت مبلغ 000/70 ریال به حساب بانکی اتاق '"});
#line 9
 testRunner.And("he has entered the following information", ((string)(null)), table1, "And ");
#line hidden
#line 12
 testRunner.When("he submits the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the result should be an UnProcessedRequest with isProcessed False value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UnProcessedRequestCreationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UnProcessedRequestCreationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
